{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f32\froman\fcharset238\fprq2 Times New Roman CE;}{\f33\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f35\froman\fcharset161\fprq2 Times New Roman Greek;}{\f36\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f37\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f38\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f39\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f40\fswiss\fcharset238\fprq2 Arial CE;}{\f41\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f43\fswiss\fcharset161\fprq2 Arial Greek;}{\f44\fswiss\fcharset162\fprq2 Arial Tur;}{\f45\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f46\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f47\fswiss\fcharset186\fprq2 Arial Baltic;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \snext0 Normal;}{\s1\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\f1\fs32\lang2057\langfe1033\kerning32\cgrid\langnp2057\langfenp1033 
\sbasedon0 \snext0 heading 1;}{\s2\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\i\f1\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 2;}{\*\cs10 \additive 
Default Paragraph Font;}{\s15\qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext15 Body Text;}}{\info{\author Mark Baker-Munton}
{\operator Mark Baker-Munton}{\creatim\yr2000\mo5\dy9\hr18\min16}{\revtim\yr2000\mo5\dy25\hr15\min40}{\version29}{\edmins82}{\nofpages2}{\nofwords463}{\nofchars2643}{\*\company Infostrategy Ltd}{\nofcharsws0}{\vern8247}}\paperw11906\paperh16838 
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1800\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule \fet0\sectd \linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl 
{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s1\ql \li0\ri0\sa240\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\f1\fs32\lang2057\langfe1033\kerning32\cgrid\langnp2057\langfenp1033 {Introduction
\par }\pard\plain \s15\qj \li0\ri0\sa240\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {
The underlying principle behind the program is to keep the code simple. The simpler the code is the easier it is to debug, the faster it is, the smaller it is and perhaps most importantly it will be easier to understand.
\par }\pard\plain \s1\ql \li0\ri0\sa240\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\f1\fs32\lang2057\langfe1033\kerning32\cgrid\langnp2057\langfenp1033 {The Basic Idea (simple)
\par }\pard\plain \s15\qj \li0\ri0\sa240\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {For each of
 the possible moves the AI engine predicts what will happen in 5 or 6 moves time (depending on the preset depth) and the score for it. It then chooses the best move out of these (if several are the same one is chosen out of these at random) and does it. S
imple really, now take a look at the code!
\par }\pard\plain \s1\ql \li0\ri0\sa240\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\f1\fs32\lang2057\langfe1033\kerning32\cgrid\langnp2057\langfenp1033 {The Basic Idea (complicated)
\par }\pard\plain \s15\qj \li0\ri0\sa240\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {
First every possible move is generated for the computer and then for the human player (from each of the already generated moves) discarding the illegal ones and those by }{\i dead}{ pieces. Th
is process continues until the maximum depth (or time) is reached. Then the scores for all the maximum depth moves are calculated (basically a ratio of the number of pieces). 
If Alpha Beta Pruning mode is switched on then the AI Engine will research further those moves which involve a piece being taken in the last depth, this means it can emulate having a higher depth and avoid traps or making stupid piece exchanges bec
ause of not researching the branches enough. Then using a }{\i MinMax }{routine these scores are passed down the tree. If the maximum depth happens to be the computers turn, the best move out of the branched ones will be chosen and recorded in its\rquote 
 parent board state. If the maximum depth is on the humans turn the same is done again but the worse score is recorded (because the opposition
 would choose the worse move for the computer). This process is repeated until the parent moves are reached (the ones physically possible to move, depth 1). The best score for this is then chosen (if there are two or more the same one is chosen at random 
between them) and computer moves this.
\par }\pard\plain \s1\ql \li0\ri0\sa240\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\f1\fs32\lang2057\langfe1033\kerning32\cgrid\langnp2057\langfenp1033 {Future Implementations}{\i\fs24 
\par }\pard\plain \s15\qj \li0\ri0\sa240\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b Alpha Beta Pruning
\par }{A good idea to implement would be }{\i Alpha Beta Pruning}{, also know as }{\i Branch and Band}{. Alpha Beta Pruning in essence emulates researching to a higher depth, by eliminating the moves which seem to far gone to be of any use. It doesn\rquote 
t research to moves which already score badly and that are stable (no dramatic change in score has occurred over the last few of moves) so that it will not stop it researching further those branches whic
h are in a piece exchange. For example if there are 4 possible moves to make, 2 of them are good and two are bad and stable. Instead of researching all 4 moves it only researches the 2 good ones but to a higher depth. This does have its\rquote 
 drawbacks such as 
it is slower and certainly not as good as researching all the moves to the maximum depth, but it generally gives a better result, because of the maximum array size and memory usage VB imposes (so the maximum depth is limited). Occasionally this method wil
l overlook a good move, but the fact is this shouldn\rquote t happen if the human play makes good moves most of the time.
\par The version of Alpha Beta Pruning implemented at the moment is very simple (and doesn\rquote t really }{\i prune}{ anything) but works quite effectively in emulating a higher ply level.
\par }{\b Static Learning}{
\par This involves recording moves on the hard drive. Basically it thinks of a move as normal, but it records to the hard drive the
 original board state and the move(s) which it has chosen. If this boardstate arises in the next game then it could research the move on  the hard drive to a further depth or just simply move faster.
\par }{\b Dynamic Learning
\par }{This is slightly different from the sta
tic technique. The difference is that this method has to be user specific. Instead of storing what it thinks to be the best move it waits until the player moves and when thinks what would have been the best move to make if the player moved to his/her curr
e
nt position. This method is much better than the static one. The drawbacks are that different states and moves would have to stored on the hard drive for each user and the computer would have to think twice for every move. Once for the current move and on
ce for the move it should have done the last move.
\par }{\b Languages
\par }{The fact that visual basic isn\rquote t a very good language for either speed or efficiency means that no matter how good the ideas are they can never live up to their true potential. For this reason por
ting this program to another language (either Delphi or C++) would be a dramatic increase in the intelligence of the program.
\par }}